" Modeline and Notes {
" vim: set foldmarker={,} foldlevel=0 foldmethod=marker spell:
"
"   This is the personal .vimrc file of Kevin Iverson based on
"   the file of Steve Francia.
"
"   You can find Steve at http://spf13.com
" }

" Environment {
    " Basics {
        set nocompatible        " must be first line
        set background=dark     " Assume a dark background
    " }
    "
    " Setup Bundle Support {
    " The next two lines ensure that the ~/.vim/bundle/ system works
        set rtp+=~/.vim/bundle/vundle
        call vundle#rc()
    " }

" }

" Bundles {
    " Deps
        Bundle 'gmarik/vundle'
        Bundle 'MarcWeber/vim-addon-mw-utils'
        Bundle 'tomtom/tlib_vim'
        Bundle 'mileszs/ack.vim'

    " General
        Bundle 'altercation/vim-colors-solarized'
        Bundle 'tpope/vim-surround'
        Bundle 'tpope/vim-ragtag'
        "Bundle 'Raimondi/delimitMate'
        " KGI - Giving CTRL-P a try
        "Bundle 'wincent/Command-T'
        Bundle 'kien/ctrlp.vim'
        Bundle 'matchit.zip'
        Bundle 'Lokaltog/vim-powerline'
        Bundle 'Lokaltog/vim-easymotion'

    " General Programming
        " Pick one of the checksyntax, jslint, or syntastic
        "Bundle 'tomtom/checksyntax_vim'
        Bundle 'scrooloose/syntastic'
        " Going old schoool because new version doesn't seem to work
        Bundle 'snipMate'
        "Bundle 'garbas/vim-snipmate'
        "Bundle 'scrooloose/snipmate-snippets'
        Bundle 'tpope/vim-fugitive' 
        Bundle 'scrooloose/nerdcommenter'
        "Bundle 'Shougo/neocomplcache'
        "Bundle 'Shougo/neocomplcache-snippets-complete'

    " Javascript
        "Bundle 'leshill/vim-json'
        "Bundle 'groenewege/vim-less'
        "Bundle 'taxilian/vim-web-indent'

    " HTML
        "Bundle 'HTML-AutoCloseTag'
        "Bundle 'ChrisYip/Better-CSS-Syntax-for-Vim'

    " Ruby
        Bundle 'tpope/vim-rails'
        Bundle 'tpope/vim-endwise'

    " Misc
        "Bundle 'tpope/vim-cucumber'
" }

" General {
    set background=dark         " Assume a dark background
    filetype plugin indent on   " Automatically detect file types.
    syntax on                   " syntax highlighting
    set mouse=a                 " automatically enable mouse usage
    scriptencoding utf-8
    autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | lcd %:p:h | endif
    " always switch to the current file directory.

    set shortmess+=filmnrxoOtT      " abbrev. of messages (avoids 'hit enter')
    set viewoptions=folds,options,cursor,unix,slash " better unix / windows compatibility
    set virtualedit=onemore         " allow for cursor beyond last character
    set history=1000                " Store a ton of history (default is 20)
    set spell                       " spell checking on
    set hidden                      " allow buffer switching without saving

    " setup for ctags
    set tags=./tags;

    " Setting up the directories {
        set backup                      " backups are nice ...
        " Could use * rather than *.*, but I prefer to leave .files unsaved
        "au BufWinLeave *.* silent! mkview  "make vim save view (state) (folds, cursor, etc)
        "au BufWinEnter *.* silent! loadview "make vim load view (state) (folds, cursor, etc)
    " }
" }

" Vim UI {
    color solarized                 " load a colorscheme
        let g:solarized_termtrans=1
        let g:solarized_termcolors=256
        let g:solarized_contrast="high"
        let g:solarized_visibility="high"
    set tabpagemax=15               " only show 15 tabs
    set showmode                    " display the current mode

    set cursorline                  " highlight current line

    if has('cmdline_info')
        set ruler                   " show the ruler
        set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " a ruler on steroids
        set showcmd                 " show partial commands in status line and
                                    " selected characters/lines in visual mode
    endif

    if has('statusline')
        set laststatus=2

        " Broken down into easily includeable segments
        set statusline=%<%f\    " Filename
        set statusline+=%w%h%m%r " Options
        set statusline+=%{fugitive#statusline()} "  Git Hotness
        set statusline+=\ [%{&ff}/%Y]            " filetype
        set statusline+=\ [%{getcwd()}]          " current dir
        set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
    endif

    set backspace=indent,eol,start  " backspace for dummies
    set linespace=0                 " No extra spaces between rows
    set nu                          " Line numbers on
    set showmatch                   " show matching brackets/parenthesis
    set incsearch                   " find as you type search
    set hlsearch                    " highlight search terms
    set winminheight=0              " windows can be 0 line high
    set ignorecase                  " case insensitive search
    set smartcase                   " case sensitive when uc present
    set wildmenu                    " show list instead of just completing
    set wildmode=list:longest,full  " command <Tab> completion, list matches, then longest common part, then all.
    set whichwrap=b,s,h,l,<,>,[,]   " backspace and cursor keys wrap to
    set scrolljump=5                " lines to scroll when cursor leaves screen
    set scrolloff=3                 " minimum lines to keep above and below cursor
    set foldenable                  " auto fold code
    set list
    set listchars=tab:,.,trail:.,extends:#,nbsp:. " Highlight problematic whitespace
" }

" Formatting {
    set nowrap                      " wrap long lines
    set autoindent                  " indent at the same level of the previous line
    set shiftwidth=2                " use indents of 2 spaces
    set expandtab                   " tabs are spaces, not tabs
    set tabstop=4                   " an indentation every four columns
    set softtabstop=2               " let backspace delete indent
    "set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)
    " Remove trailing whitespaces and ^M chars
    autocmd FileType c,cpp,java,php,js,python,twig,xml,yml autocmd BufWritePre <buffer> :call setline(1,map(getline(1,"$"),'substitute(v:val,"\\s\\+$","","")'))
" }

" Key (re)Mappings {

    "The default leader is '\', but many people prefer ',' as it's in a standard
    "location
    let mapleader = ','

    " Making it so ; works like : for commands. Saves typing and eliminates :W style typos due to lazy holding shift.
    nnoremap ; :

    " Wrapped lines goes down/up to next row, rather than next line in file.
    nnoremap j gj
    nnoremap k gk

    " Stupid shift key fixes
    "cmap W w
    "cmap WQ wq
    "cmap wQ wq
    "cmap Q q
    "cmap Tabe tabe

    " Yank from the cursor to the end of the line, to be consistent with C and D.
    nnoremap Y y$

    "clearing highlighted search
    nmap <silent> <leader>/ :nohlsearch<CR>

    " Shortcuts
    " Change Working Directory to that of the current file
    cmap cwd lcd %:p:h
    cmap cd. lcd %:p:h

    " visual shifting (does not exit Visual mode)
    vnoremap < <gv
    vnoremap > >gv 

    " Fix home and end keybindings for screen, particularly on mac
    " - for some reason this fixes the arrow keys too. huh.
    map [F $
    imap [F $
    map [H g0
    imap [H g0

    " For when you forget to sudo.. Really Write the file.
    "cmap w!! w !sudo tee % >/dev/null

    " Some helpers to edit mode
    " http://vimcasts.org/e/14
    "cnoremap %% <C-R>=expand('%:h').'/'<cr>
    "map <leader>ew :e %%
    "map <leader>es :sp %%
    "map <leader>ev :vsp %%
    "map <leader>et :tabe %%

    " Adjust viewports to the same size
    map <Leader>= <C-w>=
" }

" Plugins {

    "" OmniComplete {
        "if has("autocmd") && exists("+omnifunc")
            "autocmd Filetype *
                "\if &omnifunc == "" |
                "\setlocal omnifunc=syntaxcomplete#Complete |
                "\endif
        "endif

        "hi Pmenu  guifg=#000000 guibg=#F8F8F8 ctermfg=black ctermbg=Lightgray
        "hi PmenuSbar  guifg=#8A95A7 guibg=#F8F8F8 gui=NONE ctermfg=darkcyan ctermbg=lightgray cterm=NONE
        "hi PmenuThumb  guifg=#F8F8F8 guibg=#8A95A7 gui=NONE ctermfg=lightgray ctermbg=darkcyan cterm=NONE

        "" some convenient mappings
        "inoremap <expr> <Esc>      pumvisible() ? "\<C-e>" : "\<Esc>"
        "inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
        "inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
        "inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
        "inoremap <expr> <C-d>      pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<C-d>"
        "inoremap <expr> <C-u>      pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-u>"

        "" automatically open and close the popup menu / preview window
        "au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
        "set completeopt=menu,preview,longest
    "" }

    "" AutoCloseTag {
        "" Make it so AutoCloseTag works for xml and xhtml files as well
        "au FileType xhtml,xml ru ftplugin/html/autoclosetag.vim
        "nmap <Leader>ac <Plug>ToggleAutoCloseMappings
    "" }

    " SnipMate {
        " Setting the author var
        " If forking, please overwrite in your .vimrc.local file
        "let g:snips_author = 'Kevin Iverson <kgiverson@gmail.com>'
        "let g:snipMate = {}
        "let g:snipMate.scope_aliases = {}
        "let g:snipMate.scope_aliases['ruby'] = 'ruby,ruby-rails'
    " }

     " Buffer explorer {
        nmap <leader>b :BufExplorer<CR>
     " }

     "" JSON {
        "nmap <leader>jt <Esc>:%!python -m json.tool<CR><Esc>:set filetype=json<CR>
     "" }

     " ctrlp {
        let g:ctrlp_working_path_mode = 2
        "nnoremap <silent> <D-t> :CtrlP<CR>
        "nnoremap <silent> <D-r> :CtrlPMRU<CR>
        "KGI - don't fight the muscle memory
        nnoremap <silent> <leader>t :CtrlP<CR>
        nnoremap <silent> <leader>r :CtrlPMRU<CR>
        let g:ctrlp_custom_ignore = {
            \ 'dir':  '\.git$\|\.hg$\|\.svn$',
            \ 'file': '\.exe$\|\.so$\|\.dll$|\.png$|\.jpg$|\.gif$' }
     "}

     " Fugitive {
        nnoremap <silent> <leader>gs :Gstatus<CR>
        nnoremap <silent> <leader>gd :Gdiff<CR>
        nnoremap <silent> <leader>gc :Gcommit<CR>
        nnoremap <silent> <leader>gb :Gblame<CR>
        nnoremap <silent> <leader>gl :Glog<CR>
        nnoremap <silent> <leader>gp :Git push<CR>
     "}

     "" neocomplcache-kgi 
        "" Disable AutoComplPop.
        "let g:acp_enableAtStartup = 0
        "" Use neocomplcache.
        "let g:neocomplcache_enable_at_startup = 1
        "" Use smartcase.
        "let g:neocomplcache_enable_smart_case = 1
        "" Use camel case completion.
        "let g:neocomplcache_enable_camel_case_completion = 1
        "" Use underbar completion.
        "let g:neocomplcache_enable_underbar_completion = 1
        "" Set minimum syntax keyword length.
        "let g:neocomplcache_min_syntax_length = 3
        "let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

        "" Define dictionary.
        "let g:neocomplcache_dictionary_filetype_lists = {
            "\ 'default' : '',
            "\ 'vimshell' : $HOME.'/.vimshell_hist',
            "\ 'scheme' : $HOME.'/.gosh_completions'
                "\ }

        "" Define keyword.
        "if !exists('g:neocomplcache_keyword_patterns')
            "let g:neocomplcache_keyword_patterns = {}
        "endif
        "let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

        "" Plugin key-mappings.
        "inoremap <expr><C-g>     neocomplcache#undo_completion()
        "inoremap <expr><C-l>     neocomplcache#complete_common_string()

        "" Recommended key-mappings.
        "" <CR>: close popup and save indent.
        "inoremap <expr><CR>  neocomplcache#close_popup() . "\<CR>"
        "" <TAB>: completion.
        "inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
        "" <C-h>, <BS>: close popup and delete backword char.
        "inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
        "inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
        "inoremap <expr><C-y>  neocomplcache#close_popup()
        "inoremap <expr><C-e>  neocomplcache#cancel_popup()

        "" For cursor moving in insert mode(Not recommended)
        ""inoremap <expr><Left>  neocomplcache#close_popup() . "\<Left>"
        ""inoremap <expr><Right> neocomplcache#close_popup() . "\<Right>"
        ""inoremap <expr><Up>    neocomplcache#close_popup() . "\<Up>"
        ""inoremap <expr><Down>  neocomplcache#close_popup() . "\<Down>"

        "" AutoComplPop like behavior.
        ""let g:neocomplcache_enable_auto_select = 1

        "" Shell like behavior(not recommended).
        ""set completeopt+=longest
        ""let g:neocomplcache_enable_auto_select = 1
        ""let g:neocomplcache_disable_auto_complete = 1
        ""inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"
        ""inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"

        "" Enable omni completion.
        "autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
        "autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
        "autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
        "autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
        "autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

        "" Enable heavy omni completion.
        "if !exists('g:neocomplcache_omni_patterns')
          "let g:neocomplcache_omni_patterns = {}
        "endif

        "let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'
        ""autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
        "let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
        "let g:neocomplcache_omni_patterns.c = '\%(\.\|->\)\h\w*'
        "let g:neocomplcache_omni_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'
 
     "" }
     
     " neocomplcache-spf13 {
        "let g:neocomplcache_enable_at_startup = 1
        "let g:neocomplcache_enable_camel_case_completion = 1
        "let g:neocomplcache_enable_smart_case = 1
        "let g:neocomplcache_enable_underbar_completion = 1
        "let g:neocomplcache_min_syntax_length = 3
        "let g:neocomplcache_enable_auto_delimiter = 1

        ""AutoComplPop like behavior.
        "let g:neocomplcache_enable_auto_select = 0

        ""SuperTab like snippets behavior.
        "imap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<TAB>"

        ""Plugin key-mappings.
        "imap <C-k>     <Plug>(neocomplcache_snippets_expand)
        "smap <C-k>     <Plug>(neocomplcache_snippets_expand)
        "inoremap <expr><C-g>     neocomplcache#undo_completion()
        "inoremap <expr><C-l>     neocomplcache#complete_common_string()

        ""<CR>: close popup
        ""<s-CR>: close popup and save indent.
        ""inoremap <expr><CR>  neocomplcache#close_popup()
        ""inoremap <expr><s-CR>  neocomplcache#close_popup() . "\<CR>"
        "inoremap <expr><CR>  neocomplcache#close_popup() . "\<CR>"
        "" <TAB>: completion.
        "inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

        "" <C-h>, <BS>: close popup and delete backword char.
        "inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
        "inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
        "inoremap <expr><C-y>  neocomplcache#close_popup()
        "inoremap <expr><C-e>  neocomplcache#cancel_popup()

        "" Enable omni completion.
        "autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
        "autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
        "autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
        "autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
        "autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

        "" Enable heavy omni completion.
        "if !exists('g:neocomplcache_omni_patterns')
            "let g:neocomplcache_omni_patterns = {}
        "endif
        "let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'
        ""autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
        "let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
        "let g:neocomplcache_omni_patterns.c = '\%(\.\|->\)\h\w*'
        "let g:neocomplcache_omni_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'

        "" For snippet_complete marker.
        "if has('conceal')
            "set conceallevel=2 concealcursor=i
        "endif
        ""let g:neocomplcache_snippets_dir='~/.vim/bundle/snipmate-snippets/'


     "" }


" }

" GUI Settings {
    " GVIM- (here instead of .gvimrc)
    if has('gui_running')
        set guioptions-=T           " remove the toolbar
        set lines=40                " 40 lines of text instead of 24,
        "set guifont=Andale\ Mono\ Regular:h16,Menlo\ Regular:h15,Consolas\ Regular:h16,Courier\ New\ Regular:h18
        "if has('gui_macvim')
        "    set transparency=5          " Make the window slightly transparent
        "endif
    else
        "set term=builtin_ansi       " Make arrow and other keys work
    endif
" }

 " Functions {

function! InitializeDirectories()
  let separator = "."
  let parent = $HOME
  let prefix = '.vim'
  let dir_list = {
              \ 'backup': 'backupdir',
              \ 'views': 'viewdir',
              \ 'swap': 'directory' }

  for [dirname, settingname] in items(dir_list)
      let directory = parent . '/' . prefix . dirname . "/"
      if exists("*mkdir")
          if !isdirectory(directory)
              call mkdir(directory)
          endif
      endif
      if !isdirectory(directory)
          echo "Warning: Unable to create backup directory: " . directory
          echo "Try: mkdir -p " . directory
      else
          let directory = substitute(directory, " ", "\\\\ ", "g")
          exec "set " . settingname . "=" . directory
      endif
  endfor
endfunction
call InitializeDirectories()
" }

" Use local vimrc if available {
    if filereadable(expand("~/.vimrc.local"))
        source ~/.vimrc.local
    endif
" }

" Use local gvimrc if available and gui is running {
    if has('gui_running') 
        if filereadable(expand("~/.gvimrc.local")) 
            source ~/.gvimrc.local
        endif
    endif
" }
